{"version":3,"sources":["redux/phone/phoneOperations.js","components/ContactEditor.js","redux/phone/phoneSelectors.js","components/Filter.js","components/ContactListItem.js","components/ContactList.js","views/Contacts.js"],"names":["axios","defaults","baseURL","addContact","name","number","dispatch","a","addContactsRequest","post","data","addContactsSuccess","addContactsError","fetchContacts","fetchContactsRequest","get","fetchContactsSuccess","fetchContactsError","removeContact","id","removeContactsRequest","delete","removeContactsSuccess","removeContactsError","ContactEditor","state","unic","handleChange","target","value","props","items","find","contact","setState","handleSubmit","e","preventDefault","onAddContact","this","onSubmit","htmlFor","type","onChange","Alert","severity","Component","mapDispatchToProps","phoneOperations","connect","contacts","getContacts","getFilter","filter","getVisibleContacts","createSelector","toLowerCase","includes","getContactById","contactId","item","onChangeFilter","changeFilter","phoneSalectors","length","useStyles","makeStyles","theme","button","margin","spacing","ownProps","phoneSelectors","onRemove","classes","Box","display","justifyContent","alignItems","width","boxShadow","className","Button","variant","color","startIcon","size","onClick","map","key","Contacts","onFetchContacts"],"mappings":"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","file":"static/js/6.743ca2d3.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nimport {\r\n  addContactsError,\r\n  addContactsSuccess,\r\n  addContactsRequest,\r\n  fetchContactsRequest,\r\n  fetchContactsError,\r\n  fetchContactsSuccess,\r\n  removeContactsRequest,\r\n  removeContactsSuccess,\r\n  removeContactsError,\r\n} from './phonebookActions';\r\n\r\naxios.defaults.baseURL = 'https://goit-phonebook-api.herokuapp.com';\r\n\r\nconst addContact = ({ name, number }) => async dispatch => {\r\n  dispatch(addContactsRequest());\r\n\r\n  try {\r\n    const { data } = await axios.post('/contacts', {\r\n      name,\r\n      number,\r\n    });\r\n    dispatch(addContactsSuccess(data));\r\n  } catch (error) {\r\n    dispatch(addContactsError(error));\r\n  }\r\n};\r\n\r\nconst fetchContacts = () => async dispatch => {\r\n  dispatch(fetchContactsRequest());\r\n  try {\r\n    const { data } = await axios.get('/contacts');\r\n    dispatch(fetchContactsSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactsError(error));\r\n  }\r\n};\r\n\r\nconst removeContact = id => async dispatch => {\r\n  dispatch(removeContactsRequest());\r\n  try {\r\n    await axios.delete(`/contacts/${id}`);\r\n    dispatch(removeContactsSuccess(id));\r\n  } catch (error) {\r\n    dispatch(removeContactsError(error));\r\n  }\r\n};\r\n\r\nexport default { addContact, fetchContacts, removeContact };\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport phoneOperations from '../redux/phone/phoneOperations';\r\n// import Snackbars from '../components/Snackbar';\r\nimport Alert from '@material-ui/lab/Alert';\r\n\r\nclass ContactEditor extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n    unic: true,\r\n  };\r\n\r\n  handleChange = ({ target }) => {\r\n    const { name, value } = target;\r\n\r\n    const isNotUnicName = this.props.items.find(\r\n      contact => contact.name === value,\r\n    );\r\n    if (isNotUnicName) {\r\n      this.setState({ unic: false });\r\n    } else {\r\n      this.setState({\r\n        [name]: value,\r\n      });\r\n      this.setState({ unic: true });\r\n    }\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.onAddContact(this.state);\r\n  };\r\n\r\n  render() {\r\n    const { name, number, unic } = this.state;\r\n    return (\r\n      <>\r\n        <h2>Phonebook</h2>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <label htmlFor=\"name\">\r\n            Name\r\n            <br />\r\n            <input\r\n              type=\"text\"\r\n              value={name}\r\n              onChange={this.handleChange}\r\n              name=\"name\"\r\n            />\r\n          </label>\r\n          {!unic && (\r\n            <Alert severity=\"error\">This name is already in contacts!</Alert>\r\n          )}\r\n          <label htmlFor=\"number\">\r\n            Number\r\n            <br />\r\n            <input\r\n              type=\"text\"\r\n              value={number}\r\n              onChange={this.handleChange}\r\n              name=\"number\"\r\n            />\r\n          </label>\r\n\r\n          <button type=\"submit\">Add contact</button>\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = state => {\r\n  return state.contacts;\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  onAddContact: phoneOperations.addContact,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactEditor);\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getContacts = state => state.contacts.items;\r\n\r\nconst getFilter = state => state.contacts.filter;\r\n\r\nconst getVisibleContacts = createSelector(\r\n  [getFilter, getContacts],\r\n  (filter, contacts) => {\r\n    return contacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\r\n    );\r\n  },\r\n);\r\n\r\nconst getContactById = (state, contactId) => {\r\n  const contacts = getContacts(state);\r\n  return contacts.find(item => item.id === contactId);\r\n};\r\n\r\nexport default { getVisibleContacts, getFilter, getContacts, getContactById };\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { changeFilter } from '../redux/phone/phonebookActions';\r\nimport phoneSalectors from '../redux/phone/phoneSelectors';\r\n\r\nconst Filter = ({ contacts, value, onChangeFilter }) => {\r\n  if (contacts.length > 0) {\r\n    return (\r\n      <div>\r\n        <span>Find name: </span>\r\n        <input\r\n          type=\"text\"\r\n          value={value}\r\n          onChange={e => onChangeFilter(e.target.value)}\r\n        />\r\n      </div>\r\n    );\r\n  } else return null;\r\n};\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  contacts: PropTypes.array.isRequired,\r\n  onChangeFilter: PropTypes.func.isRequired,\r\n};\r\nconst mapStateToProps = state => ({\r\n  contacts: state.contacts.items,\r\n  value: phoneSalectors.getFilter(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  onChangeFilter: changeFilter,\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nimport phoneOperations from '../redux/phone/phoneOperations';\r\nimport phoneSelectors from '../redux/phone/phoneSelectors';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nconst ContactListItem = ({ name, number, onRemove }) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <li>\r\n      <Box\r\n        display=\"flex\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        width=\"500px\"\r\n        boxShadow={1}\r\n        margin=\"10px 0\"\r\n      >\r\n        <p className=\"name\">\r\n          {name}: {number}\r\n        </p>\r\n\r\n        <Button\r\n          variant=\"contained\"\r\n          className={classes.button}\r\n          color=\"secondary\"\r\n          startIcon={<DeleteIcon />}\r\n          size=\"small\"\r\n          onClick={onRemove}\r\n        >\r\n          Delete\r\n        </Button>\r\n      </Box>\r\n    </li>\r\n  );\r\n};\r\n\r\nContactListItem.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n  onRemove: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n  ...phoneSelectors.getContactById(state, ownProps.id),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => ({\r\n  onRemove: () => dispatch(phoneOperations.removeContact(ownProps.id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactListItem);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n\r\nimport ContactListItem from './ContactListItem';\r\nimport phoneSelectors from '../redux/phone/phoneSelectors';\r\n\r\nconst ContactList = ({ contacts }) => {\r\n  if (contacts.length > 0) {\r\n    return (\r\n      <ul>\r\n        {contacts.map(({ id }) => (\r\n          <ContactListItem key={id} id={id} />\r\n        ))}\r\n      </ul>\r\n    );\r\n  } else return null;\r\n};\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.array.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: phoneSelectors.getVisibleContacts(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(ContactList);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport ContactEditor from '../components/ContactEditor';\r\nimport Filter from '../components/Filter';\r\nimport ContactList from '../components/ContactList';\r\n\r\nimport phoneOperations from '../redux/phone/phoneOperations';\r\n// import phoneSelectors from '../redux/phone/phoneSelectors';\r\n// import { authSelectors } from '../redux/auth';\r\n\r\nclass Contacts extends Component {\r\n  componentDidMount() {\r\n    this.props.onFetchContacts();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <ContactEditor />\r\n\r\n        <h2>Contacts</h2>\r\n        <Filter />\r\n        <ContactList />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  onFetchContacts: phoneOperations.fetchContacts,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(Contacts);\r\n"],"sourceRoot":""}